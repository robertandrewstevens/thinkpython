Python for Informatics 
Exploring InformationVersion 0.0.9-d2Charles Severance

PrefacePython for Informatics: Remixing an Open BookIt is quite natural for academics who are continuously told to “publish or perish” to want to always create something from scratch that is their own fresh creation. This book is an experiment in not starting from scratch, but instead “re-mixing” the book titled Think Python: How to Think Like a Computer Scientist written by Allen B. Downey, Jeff Elkner and others.In December of 2009, I was preparing to teach SI502 - Networked Programming at the University of Michigan for the fifth semester in a row and decided it was time to write a Python textbook that focused on exploring data instead of understanding algorithms and abstractions. My goal in SI502 is to teach people life-long data handling skills using Python. Few of my students were planning to be professional computer programmers. Instead, they planned be librarians, managers, lawyers, biologists, economists, etc. who happened to want to skillfully use technology in their chosen field.I never seemed to find the perfect data-oriented Python book for my course so I set out to write just such a book. Luckily at a faculty meeting three weeks before I was about to start my new book from scratch over the holiday break, Dr. Atul Prakash showed me the Think Python book which he had used to teach his Python course that semester. It is a well-written Computer Science text with a focus on short, direct explanations and ease of learning.The overall book structure has been changed to get to doing data analysis problems as quickly as possible and have a series of running examples and exercises about data analysis from the very beginning.The chapters 2-10 are similar to the Think Python book but there have been major changes. Number-oriented examples and exercises have been replaced with data-oriented exercises. Topics are presented in the order needed to build increasingly sophisticated data analysis solutions. Some topics like try and except are pulled forward and presented as part of the chapter on conditionals. Functions are given very light treatment until they are needed to handle program complexity rather introduced as an early lesson in abstraction. Nearly all user-defined functions have been removed from the example code and exercises outside Chapter 4. The word “recursion” [1] does not appear in the book at all.
In chapters 1 and 11-16, all of the material is brand new, focusing on real-world uses and simple examples of Python for data analysis including regular expressions for searching and parsing, automating tasks on your computer, retrieving data across the network, scraping web pages for data, using web services, parsing XML and JSON data, and creating and using databases using Structured Query Language.The ultimate goal of all of these changes is a shift from a Computer Science to an Informatics focus is to only include topics into a first technology class that can be useful even if one chooses not to become a professional programmer.
Students who find this book interesting and want to further explore should look at Allen B. Downey’s Think Python book. Because there is a lot of overlap between the two books, students will quickly pick up skills in the additional areas of technical programming and algorithmic thinking that are covered in Think Python. And given that the books have a similar writing style, you should be able to move quickly through Think Python with a minimum of effort.As the copyright holder of Think Python, Allen has given me permission to change the book’s license on the material from his book that remains in this book from the GNU Free Documentation License to the more recent Creative Commons Attribution — Share Alike license. This follows a general shift in open documentation licenses moving from the GFDL to the CC-BY-SA (i.e. Wikipedia). Using the CC-BY-SA license maintains the book’s strong copyleft tradition while making it even more straightforward for new authors to reuse this material as they see fit.
I feel that this book serves an example of why open materials are so important to the future of education, and want to thank Allen B. Downey and Cambridge University Press for their forward looking decision to make the book available under an open Copyright. I hope they are pleased with the results of my efforts and I hope that you the reader are pleased with our collective efforts.
I would like to thank Allen B. Downey and Lauren Cowles for their help, patience, and guidance in dealing with and resolving the copyright issues around this book.
Charles Severance 
www.dr-chuck.com 
Ann Arbor, MI, USA 
September 9, 2013Charles Severance is a Clinical Associate Professor at the University of Michigan School of Information.
ContentsPreface1.00 Why should you learn to write programs?1.01 Creativity and motivation1.02 Computer hardware architecture1.03 Understanding programming1.04 Words and sentences1.05 Conversing with Python1.06 Terminology: interpreter and compiler1.07 Writing a program1.08 What is a program?1.09 The building blocks of programs1.10 What could possibly go wrong?1.11 The learning journey1.12 Glossary1.13 Exercises
2.00 Variables, expressions and statements2.01 Values and types
2.02 Variables
2.03 Variable names and keywords
2.04 Statements
2.05 Operators and operands2.06 Expressions 2.07 Order of operations 2.08 Modulus operator 2.09 String operations 2.10 Asking the user for input 2.11 Comments2.12 Choosing mnemonic variable names 2.13 Debugging2.14 Glossary2.15 Exercises 3.00 Conditional execution 3.01 Boolean expressions3.02 Logical operators 3.03 Conditional execution3.04 Alternative execution 3.05 Chained conditionals 3.06 Nested conditionals3.07 Catching exceptions using try and except3.08 Short circuit evaluation of logical expressions3.09 Debugging3.10 Glossary3.11 Exercises 
4.00 Functions 4.01 Function calls  
4.02 Built-in functions 
4.03 Type conversion functions 
4.04 Random numbers 4.05 Math functions 4.06 Adding new functions4.07 Definitions and uses4.08 Flow of execution4.09 Parameters and arguments 4.10 Fruitful functions and void functions 4.11 Why functions? 4.12 Debugging4.13 Glossary4.14 Exercises
5.00 Iteration 5.01 Updating variables 5.02 The while statement 5.03 Infinite loops 5.04 “Infinite loops” and break5.05 Finishing iterations with continue5.06 Definite loops using for5.07 Loop patterns 5.08 Debugging5.09 Glossary5.10 Exercises 
6.00 Strings6.01 A string is a sequence6.02 Getting the length of a string using len6.03 Traversal through a string with a loop 6.04 String slices6.05 Strings are immutable6.06 Looping and counting6.07 The in operator 
6.08 String comparison
6.09 string methods
6.10 Parsings trings
6.11 Format operator
6.12 Debugging
6.13 Glossary
6.14 Exercises 7.00 Files7.01 Persistence
7.02 Opening files 
7.03 Text files and lines 
7.04 Reading files 
7.05 Searching through a file
7.06 Letting the user choose the filename
7.07 Using try, except, and open
7.08 Writing files
7.09 Debugging 
7.10 Glossary
7.11 Exercises 
8.00 Lists8.01 A list is a sequence 
8.02 Lists are mutable 
8.03 Traversing a list
8.04 List operations
8.05 List slices 
8.06 List methods
8.07 Deleting elements8.08 Lists and functions 8.09 Lists and strings8.10 Parsing lines8.11 Objects and values 8.12 Aliasing8.13 List arguments8.14 Debugging8.15 Glossary8.16 Exercises 9.00 Dictionaries 9.01 Dictionary as a set of counters 
9.02 Dictionaries and files 
9.03 Looping and dictionaries 
9.04 Advanced text parsing
9.05 Debugging
9.06 Glossary 
9.07 Exercises 10.00 Tuples10.01 Tuples are immutable
10.02 Comparing tuples 
10.03 Tuple assignment 
10.04 Dictionaries and tuples 
10.05 Multiple assignment with dictionaries  
10.06 The most common words
10.07 Using tuples as keys in dictionaries 
10.08 Sequences: strings, lists, and tuples – Oh My! 
10.09 Debugging
10.10 Glossary
10.11 Exercises 11.00 Regular expressions 11.01 Character matching in regular expressions 11.02 Extracting data using regular expressions 11.03 Combining searching and extracting 11.04 Escape character11.05 Summary 11.06 Bonus section for Unix users 11.07 Debugging11.08 Glossary11.09 Exercises 12.00 Networked programs 12.01 HyperTextTransportProtocol-HTTP 12.02 TheWorld’sSimplestWebBrowser 12.03 Retrieving an image over HTTP 12.04 Retrieving web pages with urllib12.05 Parsing HTML and scraping the web12.06 Parsing HTML using Regular Expressions 12.07 Parsing HTML using Beautiful Soup 12.08 Reading binary files using urllib 12.09 Glossary12.10 Exercises 13.00 Using Web Services 13.01 eXtensible Markup Language - XML13.02 Parsing XML 13.03 Looping through nodes 13.04 JavaScript Object Notation - JSON13.05 Parsing JSON 13.06 Application Programming Interfaces (API)  13.07 Google geocoding webs ervice 13.08 Security and API usage13.09 Glossary13.10 Exercises 
14.00 Using databases and Structured Query Language (SQL) 14.01 What is a database?14.02 Database concepts14.03 SQLite manager Firefox add-on 14.04 Creating a database table 14.05 Structured Query Language (SQL) summary 14.06 Spidering Twitter using a database14.07 Basic data modeling14.08 Programming with multiple tables 14.09 Three kinds of keys 14.10 Using JOIN to retrieve data14.11 Summary 14.12 Debugging14.13 Glossary15.00 Visualizing data15.01 Building a Google map from geocoded data15.02 Visualizing networks and interconnections15.03 Visualizing mail data16.00 Automating common tasks on your computer16.01 File names and paths16.02 Example: Cleaning up a photo directory16.03 Command line arguments16.04 Pipes16.05 Glossary16.06 Exercises
A Python Programming on Windows B Python Programming on MacintoshC Contributions 
D Copyright Detail
[1] Except of course for this line.
